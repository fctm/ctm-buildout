=========
CTM.THEME
=========

:Author: Ferran Llamas Arroniz
:Contact: llamas.arroniz@gmail.com
:organization: Universitat Polit√®cnica de Catalunya
:date: 02/07/2013

Introduction
============
This package provides the ctm.theme for the Diazo engine. It is quite
a common theme except from some extraordinari details that are
interesting to comment.

The theme only modifies:

 * Site logo
 * Header colors
 * Site footer
 * Site favicon

Adding standalone views as external content
===========================================
As every Diazo theme, it would be expected to include theme.html,
rules.xml and theme.css files so as to provide the desired appearence
to the plone site. However, there is a specific rule to include our
stylesheet from a standalone view that is provided by the
ctm.colorpalette package. The rule is:: 

 <append css:theme="head">
   <link media="screen" href="@@css_view" type="text/css" rel="stylesheet"/>
 </append>

Where /@@css_view is the path to the standalone view, which is a
dinamically created css style sheet. The view is calculated by the
ctm.colorpalette package.

It also uses the same pattern to include the content of the site
footer and the favicon. The ctm.colorpalette also crates a specific
view for those two issues, which makes possible for the theme to treat
them as external content::

  <!-- Picks the favicon image from the view generated by ctm.colorpalette package -->
  <append css:theme="head">
    <link rel="shortcut icon" href="@@favicon_view"/>
  </append>

  <!-- Imports href page into the footer -->  
  <replace css:theme="#socios" css:content="body" href="/@@footer_view"/> 


Picking portal info with XSL
============================
An interesting approach has had to be done so as to inject some
attributes to our custom generated portal header.

Using xsl syntax, we select the value of:

 * The href attribute value from the portal-logo of the content::

  <!-- Defines a xsl variable corresponding to the portal root -->
  <xsl:variable name="portal_root" select="id('portal-logo')/@href"/>

 * The title attribute value from the portal-logo of the content::

  <!-- Defines a xsl variable corresponding to the portal title -->
  <xsl:variable name="portal_title" select="id('portal-logo')/@title"/>

And then we inject those values into our custom portal header link::
  
  <!-- Portal Header -->  
  <replace css:content="#portal-logo">
    <a id="ctm-logo" href="{$portal_root}" title="{$portal_title}">
      <div></div>
    </a>
  </replace> 


